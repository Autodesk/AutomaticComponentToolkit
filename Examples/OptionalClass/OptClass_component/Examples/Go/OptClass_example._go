/*++

Copyright (C) 2019 ACT Developers


This file has been generated by the Automatic Component Toolkit (ACT) version 1.6.0-develop.

Abstract: This is an autogenerated Go application that demonstrates the
 usage of the Go bindings of Optional Class Library

Interface version: 1.0.0

*/


package main

import (
	"fmt"
	"log"
	"../../Bindings/Go"
)

func main() {
	wrapper, err := optclass.OptClassLoadWrapper("../../Implementations/Cpp/build/Debug/optclass.dll") // TODO: add-path here
	if (err != nil) {
		log.Fatal(err)
	}
	
	nMajor, nMinor, nMicro, err := wrapper.GetVersion()
	if (err != nil) {
		log.Fatal(err)
	}
	versionString := fmt.Sprintf("optclass.version = %d.%d.%d", nMajor, nMinor, nMicro)
	
	fmt.Println(versionString)

	err = wrapper.CreateInstanceWithName("A")
	if (err != nil) {
		log.Fatal(err)
	}

	baseA, err := wrapper.FindInstanceA("A")
	if (err != nil) {
		log.Fatal(err)
	}
	if (!baseA.Handle.IsValid()) {
	 	log.Fatal("Error: Expected to find Instance \"A\".")
	}
	baseB, err := wrapper.FindInstanceB("DoesNotExist")
	if (err != nil) {
		log.Fatal(err)
	}
	if (baseB.Handle.IsValid()) {
	 	log.Fatal("Error: Did not expect to find Instance \"DoesNotExist\".")
	}

	usedA, err := wrapper.UseInstanceMaybe(baseA.Handle)
	if (err != nil) {
		log.Fatal(err)
	}
	if (!usedA) {
		log.Fatal("Error: Expected to use Instance \"A\".")
	}

	usedB, err := wrapper.UseInstanceMaybe(baseB.Handle)
	if (err != nil) {
		log.Fatal(err)
	}
	if (usedB) {
		log.Fatal("Error: Did not expect to use Instance \"DoesNotExist\".")
	}

	fmt.Println("Passed.")
}
