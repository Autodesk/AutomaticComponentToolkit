'''++

Copyright (C) 2019 ACT Developers


This file has been generated by the Automatic Component Toolkit (ACT) version 1.6.0-develop.

Abstract: This is an autogenerated Python application that demonstrates the
 usage of the Python bindings of Optional Class Library

Interface version: 1.0.0

'''


import os
import sys
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), "..", "..", "Bindings", "Python"))
import OptClass


def main():
	libpath = '' # TODO add the location of the shared library binary here
	wrapper = OptClass.Wrapper(libraryName = os.path.join(libpath, "projectoptclass"))
	
	major, minor, micro = wrapper.GetVersion()
	print("OptClass version: {:d}.{:d}.{:d}".format(major, minor, micro), end="")
	print("")

	wrapper.CreateInstanceWithName("A")
	baseA = wrapper.FindInstanceA("A")
	if baseA is None:
		print("Error: Expected to find Instance \"A\".")
		return 1

	baseB = wrapper.FindInstanceB("DoesNotExist")
	if baseB is not None:
		print("Error: Did not expect to find Instance \"DoesNotExist\".")
		return 1

	if not wrapper.UseInstanceMaybe(baseA):
		print("Error: Expected to use Instance \"A\".")
		return 1

	if wrapper.UseInstanceMaybe(baseB):
		print("Error: Expected to use Instance \"DoesNotExist\".")
		return 1

	print("Passed.")

if __name__ == "__main__":
	try:
		main()
	except OptClass.EOptClassException as e:
		print(e)
