/*++

Copyright (C) 2019 ACT Developers


This file has been generated by the Automatic Component Toolkit (ACT) version 1.6.0-develop.

Abstract: This is an autogenerated Go wrapper file in order to allow an easy
 use of Optional Class Library

Interface version: 1.0.0

*/


package optclass

/*************************************************************************************************************************
 Declaration of interfaces
**************************************************************************************************************************/

type OptClassHandle interface {
		Close() error
		IsValid() bool
}

type OptClassGoInterface interface {

	/**
	* Acquire shared ownership of an Instance
	*
	* @param[in] Wrapper - Wrapper instance.
	* @param[in] Instance - Instance Handle
	*/
	AcquireInstance(Instance OptClassHandle) (error)


	/**
	* Releases shared ownership of an Instance
	*
	* @param[in] Wrapper - Wrapper instance.
	* @param[in] Instance - Instance Handle
	*/
	ReleaseInstance(Instance OptClassHandle) (error)


	/**
	* retrieves the binary version of this library.
	*
	* @param[in] Wrapper - Wrapper instance.
	* @return returns the major version of this library
	* @return returns the minor version of this library
	* @return returns the micro version of this library
	*/
	GetVersion() (uint32, uint32, uint32, error)


	/**
	* Returns the last error recorded on this object
	*
	* @param[in] Wrapper - Wrapper instance.
	* @param[in] Instance - Instance Handle
	* @return Message of the last error
	* @return Is there a last error to query
	*/
	GetLastError(Instance OptClassHandle) (string, bool, error)


	/**
	* Handles Library Journaling
	*
	* @param[in] Wrapper - Wrapper instance.
	* @param[in] sFileName - Journal FileName
	*/
	SetJournal(sFileName string) (error)


	/**
	* Creates an instance of Base class with a given identifier (but does not return it)
	*
	* @param[in] Wrapper - Wrapper instance.
	* @param[in] sIdentifier - Identifier of the new instance
	*/
	CreateInstanceWithName(sIdentifier string) (error)


	/**
	* Finds a Base class instance by Identifier
	*
	* @param[in] Wrapper - Wrapper instance.
	* @param[in] sIdentifier - Identifier of the tnstance to query
	* @return Base class instance
	*/
	FindInstanceA(sIdentifier string) (OptClassHandle, error)


	/**
	* Finds a Base class instance by Identifier
	*
	* @param[in] Wrapper - Wrapper instance.
	* @param[in] sIdentifier - Identifier of the tnstance to query
	* @return Base class instance
	*/
	FindInstanceB(sIdentifier string) (OptClassHandle, error)


	/**
	* Uses a Base class instance
	*
	* @param[in] Wrapper - Wrapper instance.
	* @param[in] Instance - Base class instance
	* @return Was the Instance used?
	*/
	UseInstanceMaybe(Instance OptClassHandle) (bool, error)


}


/*************************************************************************************************************************
Class definition OptClassBase
**************************************************************************************************************************/

type OptClassBase struct {
	Interface OptClassGoInterface
	Handle OptClassHandle
}

func (instance *OptClassBase) Close() (error) {
	return instance.Handle.Close()
}

func (instance *OptClassWrapper) AcquireInstance(Instance OptClassHandle) (error) {
	error := instance.Interface.AcquireInstance(Instance)
	return error
}

func (instance *OptClassWrapper) ReleaseInstance(Instance OptClassHandle) (error) {
	error := instance.Interface.ReleaseInstance(Instance)
	return error
}

func (instance *OptClassWrapper) GetVersion() (uint32, uint32, uint32, error) {
	nMajor, nMinor, nMicro, error := instance.Interface.GetVersion()
	return nMajor, nMinor, nMicro, error
}

func (instance *OptClassWrapper) GetLastError(Instance OptClassHandle) (string, bool, error) {
	sErrorMessage, bHasError, error := instance.Interface.GetLastError(Instance)
	return sErrorMessage, bHasError, error
}

func (instance *OptClassWrapper) SetJournal(sFileName string) (error) {
	error := instance.Interface.SetJournal(sFileName)
	return error
}

func (instance *OptClassWrapper) CreateInstanceWithName(sIdentifier string) (error) {
	error := instance.Interface.CreateInstanceWithName(sIdentifier)
	return error
}

func (instance *OptClassWrapper) FindInstanceA(sIdentifier string) (OptClassBase, error) {
	hInstance, error := instance.Interface.FindInstanceA(sIdentifier)
	var cInstance OptClassBase
	cInstance.Interface = instance.Interface
	cInstance.Handle = hInstance
	return cInstance, error
}

func (instance *OptClassWrapper) FindInstanceB(sIdentifier string) (OptClassBase, error) {
	hInstance, error := instance.Interface.FindInstanceB(sIdentifier)
	var cInstance OptClassBase
	cInstance.Interface = instance.Interface
	cInstance.Handle = hInstance
	return cInstance, error
}

func (instance *OptClassWrapper) UseInstanceMaybe(Instance OptClassHandle) (bool, error) {
	bIsUsed, error := instance.Interface.UseInstanceMaybe(Instance)
	return bIsUsed, error
}

