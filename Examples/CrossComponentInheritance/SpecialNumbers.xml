<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="Special Numbers library" namespace="Special" copyright="Special Numbers developers" year="2019" basename="special"
	version="1.0.0">
	<license>
		<line value="All rights reserved." />
	</license>
	
	<importcomponent uri="Numbers.xml" namespace="Numbers"/>
	<!-- class="Namespace:*" becomes aware of this.-->
	
	<bindings>
		<binding language="CppDynamic" indentation="tabs" />
		<binding language="Python" indentation="tabs" />
		<!--
		<binding language="Pascal" indentation="2spaces" />
		-->
	</bindings>
	<implementations>
			<implementation language="Cpp" indentation="tabs"/>
			<!--
			<implementation language="Pascal" indentation="2spaces" stubidentifier="impl"/>
			-->
	</implementations>
	
	<errors>
		<error name="NOTIMPLEMENTED" code="1" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="2" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="3" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="4" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="5" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="6" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="7" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="8" description="the version of the binary interface does not match the bindings interface" />
	</errors>
	
	<class name="Base" releasemethod="ReleaseInstance" acquiremethod="AcquireInstance" errormethod="GetLastError"
		versionmethod="GetVersion" symbollookupmethod="GetSymbolLookupMethod">
		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>
		<method name="ReleaseInstance" description="Releases shared ownership of an Instance">
		</method>
		<method name="AcquireInstance" description="Acquires shared ownership of an Instance">
		</method>
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
	</class>
	
	<!-- cross component inheritance is meant to be Interface-only, i.e. private inheritance in C++ terms.
	- Implementation CAN use a "has-a" relationship to a base class instance, but does not have to.
	- Never can a SpecialVariable access memory of a Numbers:Variable directly via member access
	- what actually needs to be provided by any implementation of SpecialVariable is
		- a function table that is an extension to the functiontable of Numbers:Variable
		- that appends the "GetSpecialValue" method to that table
	- the Release, Acquire and GetLastError-methods in the FunctionTable of an instance of SpecialVariable (even if it is downcast on client side to a Numbers:Variable)
	  will ALWAYS point to SpecialVariable's Release and AcquireMethod
	-->
	
	<class name="SpecialVariable" parent="Numbers:Variable" description="A special variable number">
		<method name="GetSpecialValue" description="Returns the current value of this Variable as integer. i.e. it rounds">
			<param name="Value" type="int64" pass="return" description="The current value of this Variable" />
		</method>
	</class>
		
	<global baseclassname="Base" errormethod="GetLastError" versionmethod="GetVersion" symbollookupmethod="GetSymbolLookupMethod">
		<method name="CreateSpecialVariableAsVariable" description="Creates a new SpecialVariable instance">
			<param name="InitialValue" type="double" pass="in" description="Initial value of the new SpecialVariable" />
			<param name="Instance" type="class" class="Numbers:Variable" pass="return" description="New SpecialVariable instance" />
		</method>
		<method name="CreateSpecialVariable" description="Creates a new SpecialVariable instance">
			<param name="InitialValue" type="double" pass="in" description="Initial value of the new SpecialVariable" />
			<param name="Instance" type="class" class="SpecialVariable" pass="return" description="New SpecialVariable instance" />
		</method>
		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>
		<method name="GetLastError" versionmethod="GetVersion" description="Returns the last error recorded on component">
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
	</global>
</component>
