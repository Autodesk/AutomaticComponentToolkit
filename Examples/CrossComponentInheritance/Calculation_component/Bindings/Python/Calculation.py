'''++

Copyright (C) 2019 Calculation developers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 2.0.0-develop.

Abstract: This is an autogenerated Python file in order to allow an easy
 use of Calculation library

Interface version: 1.0.0

'''


import ctypes
import platform
import enum
import os

import sys
# Injected Components
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), "..", "..", "..", "Numbers_component", "Bindings", "Python"))
import Numbers

name = "calculation"

'''Definition of domain specific exception
'''
class ECalculationException(Exception):
	def __init__(self, code, message = ''):
		self._code = code
		self._message = message
	
	def __str__(self):
		if self._message:
			return 'CalculationException ' + str(self._code) + ': '+ str(self._message)
		return 'CalculationException ' + str(self._code)

'''Definition of binding API version
'''
class BindingVersion(enum.IntEnum):
	MAJOR = 1
	MINOR = 0
	MICRO = 0

'''Definition Error Codes
'''
class ErrorCodes(enum.IntEnum):
	SUCCESS = 0
	NOTIMPLEMENTED = 1
	INVALIDPARAM = 2
	INVALIDCAST = 3
	BUFFERTOOSMALL = 4
	GENERICEXCEPTION = 5
	COULDNOTLOADLIBRARY = 6
	COULDNOTFINDLIBRARYEXPORT = 7
	INCOMPATIBLEBINARYVERSION = 8

'''Definition of Function Tables
'''
class FunctionTable:
	calculation_createcalculator = None
	calculation_getversion = None
	calculation_getlasterror = None
	calculation_injectcomponent = None
	calculation_getsymbollookupmethod = None
	calculation_base_getsymbollookupmethod = None
	calculation_base_releaseinstance = None
	calculation_base_acquireinstance = None
	calculation_base_getversion = None
	calculation_base_getlasterror = None
	calculation_calculator_enlistvariable = None
	calculation_calculator_getenlistedvariable = None
	calculation_calculator_clearvariables = None
	calculation_calculator_multiply = None
	calculation_calculator_add = None

class FunctionTableBase:
	calculation_base_getsymbollookupmethod = None
	calculation_base_releaseinstance = None
	calculation_base_acquireinstance = None
	calculation_base_getversion = None
	calculation_base_getlasterror = None

class FunctionTableCalculator:
	calculation_calculator_enlistvariable = None
	calculation_calculator_getenlistedvariable = None
	calculation_calculator_clearvariables = None
	calculation_calculator_multiply = None
	calculation_calculator_add = None


'''Extended handle type
'''
class CalculationExtendedHandle(ctypes.Structure):
	_pack_ = 1
	_fields_ = [
		('handle', ctypes.c_void_p),
		('symbolLookupMethod', ctypes.c_void_p)
	]

'''Wrapper Class Implementation
'''
class Wrapper:

# Injected Components
	_NumbersWrapper = None

	def __init__(self, libraryName = None, symbolLookupMethodAddress = None):
		ending = ''
		if platform.system() == 'Windows':
			ending = 'dll'
		elif platform.system() == 'Linux':
			ending = 'so'
		elif platform.system() == 'Darwin':
			ending = 'dylib'
		else:
			raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY)
		
		if (not libraryName) and (not symbolLookupMethodAddress):
			libraryName = os.path.join(os.path.dirname(os.path.realpath(__file__)),'calculation')
		
		if libraryName is not None:
			path = libraryName + '.' + ending
			try:
				self._functionTableWrapper = ctypes.CDLL(path)
			except Exception as e:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(e) + '| "'+path + '"' )
			
			self._loadFunctionTable()
		elif symbolLookupMethodAddress is not None:
				self._functionTableWrapper = self._loadFunctionTableFromMethod(symbolLookupMethodAddress)
		else:
			raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(e))
		
		self._checkBinaryVersion()
		self._CalculationWrapper = self
	
	def _loadFunctionTableFromMethod(self, symbolLookupMethodAddress):
		functionTable = FunctionTable()
		try:
			symbolLookupMethodType = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p))
			symbolLookupMethod = symbolLookupMethodType(int(symbolLookupMethodAddress))
			
			methodAddress = ctypes.c_void_p()
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_createcalculator")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(CalculationExtendedHandle))
			functionTable.calculation_createcalculator = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_getversion")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.c_uint32))
			functionTable.calculation_getversion = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_getlasterror")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_uint64, ctypes.POINTER(ctypes.c_uint64), ctypes.c_char_p, ctypes.POINTER(ctypes.c_bool))
			functionTable.calculation_getlasterror = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_injectcomponent")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_char_p, ctypes.c_void_p)
			functionTable.calculation_injectcomponent = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_getsymbollookupmethod")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_void_p))
			functionTable.calculation_getsymbollookupmethod = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_base_getsymbollookupmethod")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle, ctypes.POINTER(ctypes.c_void_p))
			functionTable.calculation_base_getsymbollookupmethod = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_base_releaseinstance")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle)
			functionTable.calculation_base_releaseinstance = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_base_acquireinstance")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle)
			functionTable.calculation_base_acquireinstance = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_base_getversion")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.c_uint32))
			functionTable.calculation_base_getversion = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_base_getlasterror")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle, ctypes.c_uint64, ctypes.POINTER(ctypes.c_uint64), ctypes.c_char_p, ctypes.POINTER(ctypes.c_bool))
			functionTable.calculation_base_getlasterror = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_calculator_enlistvariable")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle, Numbers.NumbersExtendedHandle)
			functionTable.calculation_calculator_enlistvariable = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_calculator_getenlistedvariable")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle, ctypes.c_uint32, ctypes.POINTER(Numbers.NumbersExtendedHandle))
			functionTable.calculation_calculator_getenlistedvariable = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_calculator_clearvariables")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle)
			functionTable.calculation_calculator_clearvariables = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_calculator_multiply")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle, ctypes.POINTER(Numbers.NumbersExtendedHandle))
			functionTable.calculation_calculator_multiply = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_calculator_add")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle, ctypes.POINTER(Numbers.NumbersExtendedHandle))
			functionTable.calculation_calculator_add = methodType(int(methodAddress.value))
			
		except AttributeError as ae:
			raise ECalculationException(ErrorCodes.COULDNOTFINDLIBRARYEXPORT, ae.args[0])
		return functionTable
		
	def _loadFunctionTable(self):
		try:
			self._functionTableWrapper.calculation_createcalculator.restype = ctypes.c_int32
			self._functionTableWrapper.calculation_createcalculator.argtypes = [ctypes.POINTER(CalculationExtendedHandle)]
			
			self._functionTableWrapper.calculation_getversion.restype = ctypes.c_int32
			self._functionTableWrapper.calculation_getversion.argtypes = [ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.c_uint32)]
			
			self._functionTableWrapper.calculation_getlasterror.restype = ctypes.c_int32
			self._functionTableWrapper.calculation_getlasterror.argtypes = [ctypes.c_uint64, ctypes.POINTER(ctypes.c_uint64), ctypes.c_char_p, ctypes.POINTER(ctypes.c_bool)]
			
			self._functionTableWrapper.calculation_injectcomponent.restype = ctypes.c_int32
			self._functionTableWrapper.calculation_injectcomponent.argtypes = [ctypes.c_char_p, ctypes.c_void_p]
			
			self._functionTableWrapper.calculation_getsymbollookupmethod.restype = ctypes.c_int32
			self._functionTableWrapper.calculation_getsymbollookupmethod.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
			
			self._functionTableWrapper.calculation_base_getsymbollookupmethod.restype = ctypes.c_int32
			self._functionTableWrapper.calculation_base_getsymbollookupmethod.argtypes = [CalculationExtendedHandle, ctypes.POINTER(ctypes.c_void_p)]
			
			self._functionTableWrapper.calculation_base_releaseinstance.restype = ctypes.c_int32
			self._functionTableWrapper.calculation_base_releaseinstance.argtypes = [CalculationExtendedHandle]
			
			self._functionTableWrapper.calculation_base_acquireinstance.restype = ctypes.c_int32
			self._functionTableWrapper.calculation_base_acquireinstance.argtypes = [CalculationExtendedHandle]
			
			self._functionTableWrapper.calculation_base_getversion.restype = ctypes.c_int32
			self._functionTableWrapper.calculation_base_getversion.argtypes = [CalculationExtendedHandle, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.c_uint32)]
			
			self._functionTableWrapper.calculation_base_getlasterror.restype = ctypes.c_int32
			self._functionTableWrapper.calculation_base_getlasterror.argtypes = [CalculationExtendedHandle, ctypes.c_uint64, ctypes.POINTER(ctypes.c_uint64), ctypes.c_char_p, ctypes.POINTER(ctypes.c_bool)]
			
			self._functionTableWrapper.calculation_calculator_enlistvariable.restype = ctypes.c_int32
			self._functionTableWrapper.calculation_calculator_enlistvariable.argtypes = [CalculationExtendedHandle, Numbers.NumbersExtendedHandle]
			
			self._functionTableWrapper.calculation_calculator_getenlistedvariable.restype = ctypes.c_int32
			self._functionTableWrapper.calculation_calculator_getenlistedvariable.argtypes = [CalculationExtendedHandle, ctypes.c_uint32, ctypes.POINTER(Numbers.NumbersExtendedHandle)]
			
			self._functionTableWrapper.calculation_calculator_clearvariables.restype = ctypes.c_int32
			self._functionTableWrapper.calculation_calculator_clearvariables.argtypes = [CalculationExtendedHandle]
			
			self._functionTableWrapper.calculation_calculator_multiply.restype = ctypes.c_int32
			self._functionTableWrapper.calculation_calculator_multiply.argtypes = [CalculationExtendedHandle, ctypes.POINTER(Numbers.NumbersExtendedHandle)]
			
			self._functionTableWrapper.calculation_calculator_add.restype = ctypes.c_int32
			self._functionTableWrapper.calculation_calculator_add.argtypes = [CalculationExtendedHandle, ctypes.POINTER(Numbers.NumbersExtendedHandle)]
			
		except AttributeError as ae:
			raise ECalculationException(ErrorCodes.COULDNOTFINDLIBRARYEXPORT, ae.args[0])
	
	def _checkBinaryVersion(self):
		nMajor, nMinor, _ = self.GetVersion()
		if (nMajor != BindingVersion.MAJOR) or (nMinor < BindingVersion.MINOR):
			raise ECalculationException(ErrorCodes.INCOMPATIBLEBINARYVERSION)
	
	def checkError(self, errorCode):
		if errorCode != ErrorCodes.SUCCESS.value:
			message,_ = self.GetLastError(instance)
			raise ECalculationException(errorCode, message)
	
	def CreateCalculator(self):
		InstanceHandle = CalculationExtendedHandle()
		self.checkError(self._functionTableWrapper.calculation_createcalculator(InstanceHandle))
		if InstanceHandle:
			InstanceObject = Calculator(InstanceHandle)
		else:
			raise ECalculationException(ErrorCodes.INVALIDCAST, 'Invalid return/output value')
		
		return InstanceObject
	
	def GetVersion(self):
		pMajor = ctypes.c_uint32()
		pMinor = ctypes.c_uint32()
		pMicro = ctypes.c_uint32()
		self.checkError(self._functionTableWrapper.calculation_getversion(pMajor, pMinor, pMicro))
		
		return pMajor.value, pMinor.value, pMicro.value
	
	def GetLastError(self):
		nErrorMessageBufferSize = ctypes.c_uint64(0)
		nErrorMessageNeededChars = ctypes.c_uint64(0)
		pErrorMessageBuffer = ctypes.c_char_p(None)
		pHasError = ctypes.c_bool()
		self.checkError(self._functionTableWrapper.calculation_getlasterror(nErrorMessageBufferSize, nErrorMessageNeededChars, pErrorMessageBuffer, pHasError))
		nErrorMessageBufferSize = ctypes.c_uint64(nErrorMessageNeededChars.value)
		pErrorMessageBuffer = (ctypes.c_char * (nErrorMessageNeededChars.value))()
		self.checkError(self._functionTableWrapper.calculation_getlasterror(nErrorMessageBufferSize, nErrorMessageNeededChars, pErrorMessageBuffer, pHasError))
		
		return pErrorMessageBuffer.value.decode(), pHasError.value
	
	def InjectComponent(self, NameSpace, SymbolAddressMethod):
		pNameSpace = ctypes.c_char_p(str.encode(NameSpace))
		pSymbolAddressMethod = ctypes.c_void_p(SymbolAddressMethod)
		self.checkError(self._functionTableWrapper.calculation_injectcomponent(pNameSpace, pSymbolAddressMethod))
		
		bNameSpaceFound = False
		if NameSpace == "Numbers":
			if self._NumbersWrapper is not None:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, "Library with namespace " + NameSpace + " is already registered.")
			self._NumbersWrapper = Numbers.Wrapper(symbolLookupMethodAddress = SymbolAddressMethod)
			bNameSpaceFound = True
		if not bNameSpaceFound:
			raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, "Unknown namespace " + NameSpace)
		
	
	def GetSymbolLookupMethod(self):
		pSymbolLookupMethod = ctypes.c_void_p()
		self.checkError(self._functionTableWrapper.calculation_getsymbollookupmethod(pSymbolLookupMethod))
		
		return pSymbolLookupMethod.value
	


''' Class Implementation for Base
'''
class Base:
	_mapMethodToFunctionTableBase={}
	
	def __init__(self, handle):
		if not handle:
			raise ECalculationException(ErrorCodes.INVALIDPARAM)
		self._handle = handle
		self._functionTableBase = Base._lookupFunctionTableBase(handle)
		self.()
	
	def __del__(self):
		self.()
	
	def checkError(self, errorCode):
		if errorCode != ErrorCodes.SUCCESS.value:
			message,_ = self.GetLastError(instance)
			raise ECalculationException(errorCode, message)
	

	@classmethod
	def _lookupFunctionTableBase(cls, handle):
		method = handle.symbolLookupMethod
		if not method in cls._mapMethodToFunctionTableBase:
			functionTable = cls._loadFunctionTableBaseFromMethod(method)
			cls._mapMethodToFunctionTableBase[method] = functionTable
		return cls._mapMethodToFunctionTableBase[method]

	@staticmethod
	def _loadFunctionTableBaseFromMethod(method):
		try:
			symbolLookupMethodType = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p))
			symbolLookupMethod = symbolLookupMethodType(int(method))
			methodAddress = ctypes.c_void_p()
			functionTable = FunctionTableBase()
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_base_getsymbollookupmethod")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle, ctypes.POINTER(ctypes.c_void_p))
			functionTable.calculation_base_getsymbollookupmethod = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_base_releaseinstance")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle)
			functionTable.calculation_base_releaseinstance = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_base_acquireinstance")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle)
			functionTable.calculation_base_acquireinstance = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_base_getversion")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle, ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.c_uint32))
			functionTable.calculation_base_getversion = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_base_getlasterror")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle, ctypes.c_uint64, ctypes.POINTER(ctypes.c_uint64), ctypes.c_char_p, ctypes.POINTER(ctypes.c_bool))
			functionTable.calculation_base_getlasterror = methodType(int(methodAddress.value))
			
		except AttributeError as ae:
			raise EDMKCalcException(ErrorCodes.COULDNOTFINDLIBRARYEXPORT, ae.args[0])
		return functionTable

	def GetSymbolLookupMethod(self):
		pSymbolLookupMethod = ctypes.c_void_p()
		self.checkError(self._functionTableBase.calculation_base_getsymbollookupmethod(self._handle, pSymbolLookupMethod))
		
		return pSymbolLookupMethod.value
	
	def ReleaseInstance(self):
		self.checkError(self._functionTableBase.calculation_base_releaseinstance(self._handle))
		
	
	def AcquireInstance(self):
		self.checkError(self._functionTableBase.calculation_base_acquireinstance(self._handle))
		
	
	def GetVersion(self):
		pMajor = ctypes.c_uint32()
		pMinor = ctypes.c_uint32()
		pMicro = ctypes.c_uint32()
		self.checkError(self._functionTableBase.calculation_base_getversion(self._handle, pMajor, pMinor, pMicro))
		
		return pMajor.value, pMinor.value, pMicro.value
	
	def GetLastError(self):
		nErrorMessageBufferSize = ctypes.c_uint64(0)
		nErrorMessageNeededChars = ctypes.c_uint64(0)
		pErrorMessageBuffer = ctypes.c_char_p(None)
		pHasError = ctypes.c_bool()
		self.checkError(self._functionTableBase.calculation_base_getlasterror(self._handle, nErrorMessageBufferSize, nErrorMessageNeededChars, pErrorMessageBuffer, pHasError))
		nErrorMessageBufferSize = ctypes.c_uint64(nErrorMessageNeededChars.value)
		pErrorMessageBuffer = (ctypes.c_char * (nErrorMessageNeededChars.value))()
		self.checkError(self._functionTableBase.calculation_base_getlasterror(self._handle, nErrorMessageBufferSize, nErrorMessageNeededChars, pErrorMessageBuffer, pHasError))
		
		return pErrorMessageBuffer.value.decode(), pHasError.value
	


''' Class Implementation for Calculator
'''
class Calculator(Base):
	_mapMethodToFunctionTableCalculator={}
	
	def __init__(self, handle):
		Base.__init__(self, handle)
		self._functionTableCalculator = Calculator._lookupFunctionTableCalculator(handle)

	@classmethod
	def _lookupFunctionTableCalculator(cls, handle):
		method = handle.symbolLookupMethod
		if not method in cls._mapMethodToFunctionTableCalculator:
			functionTable = cls._loadFunctionTableCalculatorFromMethod(method)
			cls._mapMethodToFunctionTableCalculator[method] = functionTable
		return cls._mapMethodToFunctionTableCalculator[method]

	@staticmethod
	def _loadFunctionTableCalculatorFromMethod(method):
		try:
			symbolLookupMethodType = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_char_p, ctypes.POINTER(ctypes.c_void_p))
			symbolLookupMethod = symbolLookupMethodType(int(method))
			methodAddress = ctypes.c_void_p()
			functionTable = FunctionTableCalculator()
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_calculator_enlistvariable")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle, Numbers.NumbersExtendedHandle)
			functionTable.calculation_calculator_enlistvariable = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_calculator_getenlistedvariable")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle, ctypes.c_uint32, ctypes.POINTER(Numbers.NumbersExtendedHandle))
			functionTable.calculation_calculator_getenlistedvariable = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_calculator_clearvariables")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle)
			functionTable.calculation_calculator_clearvariables = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_calculator_multiply")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle, ctypes.POINTER(Numbers.NumbersExtendedHandle))
			functionTable.calculation_calculator_multiply = methodType(int(methodAddress.value))
			
			err = symbolLookupMethod(ctypes.c_char_p(str.encode("calculation_calculator_add")), methodAddress)
			if err != 0:
				raise ECalculationException(ErrorCodes.COULDNOTLOADLIBRARY, str(err))
			methodType = ctypes.CFUNCTYPE(ctypes.c_int32, CalculationExtendedHandle, ctypes.POINTER(Numbers.NumbersExtendedHandle))
			functionTable.calculation_calculator_add = methodType(int(methodAddress.value))
			
		except AttributeError as ae:
			raise EDMKCalcException(ErrorCodes.COULDNOTFINDLIBRARYEXPORT, ae.args[0])
		return functionTable

	def EnlistVariable(self, VariableObject):
		VariableHandle = None
		if VariableObject:
			VariableHandle = VariableObject._handle
		else:
			raise ECalculationException(ErrorCodes.INVALIDPARAM, 'Invalid return/output value')
		self.checkError(self._functionTableCalculator.calculation_calculator_enlistvariable(self._handle, VariableHandle))
		
	
	def GetEnlistedVariable(self, Index):
		nIndex = ctypes.c_uint32(Index)
		VariableHandle = Numbers.NumbersExtendedHandle()
		self.checkError(self._functionTableCalculator.calculation_calculator_getenlistedvariable(self._handle, nIndex, VariableHandle))
		if VariableHandle:
			VariableObject = Numbers.Variable(VariableHandle)
		else:
			raise ECalculationException(ErrorCodes.INVALIDCAST, 'Invalid return/output value')
		
		return VariableObject
	
	def ClearVariables(self):
		self.checkError(self._functionTableCalculator.calculation_calculator_clearvariables(self._handle))
		
	
	def Multiply(self):
		InstanceHandle = Numbers.NumbersExtendedHandle()
		self.checkError(self._functionTableCalculator.calculation_calculator_multiply(self._handle, InstanceHandle))
		if InstanceHandle:
			InstanceObject = Numbers.Variable(InstanceHandle)
		else:
			raise ECalculationException(ErrorCodes.INVALIDCAST, 'Invalid return/output value')
		
		return InstanceObject
	
	def Add(self):
		InstanceHandle = Numbers.NumbersExtendedHandle()
		self.checkError(self._functionTableCalculator.calculation_calculator_add(self._handle, InstanceHandle))
		if InstanceHandle:
			InstanceObject = Numbers.Variable(InstanceHandle)
		else:
			raise ECalculationException(ErrorCodes.INVALIDCAST, 'Invalid return/output value')
		
		return InstanceObject
	
		
