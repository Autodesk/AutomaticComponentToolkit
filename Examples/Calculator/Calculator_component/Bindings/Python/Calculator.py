'''++

Copyright (C) 2019 Calculator developers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.6.0-develop.

Abstract: This is an autogenerated Python file in order to allow an easy
 use of Calculator library

Interface version: 1.0.0

'''


import ctypes
import platform
import enum

name = "calculator"

'''Definition of domain specific exception
'''
class ECalculatorException(Exception):
	def __init__(self, code, message = ''):
		self._code = code
		self._message = message
	
	def __str__(self):
		if self._message:
			return 'CalculatorException ' + str(self._code) + ': '+ str(self._message)
		return 'CalculatorException ' + str(self._code)

'''Definition of binding API version
'''
class BindingVersion(enum.IntEnum):
	MAJOR = 1
	MINOR = 0
	MICRO = 0

'''Definition Error Codes
'''
class ErrorCodes(enum.IntEnum):
	SUCCESS = 0
	NOTIMPLEMENTED = 1
	INVALIDPARAM = 2
	INVALIDCAST = 3
	BUFFERTOOSMALL = 4
	GENERICEXCEPTION = 5
	COULDNOTLOADLIBRARY = 6
	COULDNOTFINDLIBRARYEXPORT = 7
	INCOMPATIBLEBINARYVERSION = 8


'''Wrapper Class Implementation
'''
class Wrapper:

	def __init__(self, libraryName = None):
		ending = ''
		if platform.system() == 'Windows':
			ending = 'dll'
		elif platform.system() == 'Linux':
			ending = 'so'
		elif platform.system() == 'Darwin':
			ending = 'dylib'
		else:
			raise ECalculatorException(ErrorCodes.COULDNOTLOADLIBRARY)
		
		if (not libraryName):
			libraryName = os.path.join(os.path.dirname(os.path.realpath(__file__)),'calculator')
		path = libraryName + '.' + ending
		
		try:
			self.lib = ctypes.CDLL(path)
		except Exception as e:
			raise ECalculatorException(ErrorCodes.COULDNOTLOADLIBRARY, str(e) + '| "'+path + '"' )
		
		self._loadFunctionTable()
		
		self._checkBinaryVersion()
	
	def _loadFunctionTable(self):
		try:
			self.lib.calculator_getversion.restype = ctypes.c_int64
			self.lib.calculator_getversion.argtypes = [ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.c_uint32)]
			
			self.lib.calculator_getlasterror.restype = ctypes.c_int64
			self.lib.calculator_getlasterror.argtypes = [ctypes.c_void_p, ctypes.c_uint64, ctypes.POINTER(ctypes.c_uint64), ctypes.c_char_p, ctypes.POINTER(ctypes.c_bool)]
			
			self.lib.calculator_releaseinstance.restype = ctypes.c_int64
			self.lib.calculator_releaseinstance.argtypes = [ctypes.c_void_p]
			
			self.lib.calculator_createvariable.restype = ctypes.c_int64
			self.lib.calculator_createvariable.argtypes = [ctypes.c_double, ctypes.POINTER(ctypes.c_void_p)]
			
			self.lib.calculator_createcalculator.restype = ctypes.c_int64
			self.lib.calculator_createcalculator.argtypes = [ctypes.POINTER(ctypes.c_void_p)]
			
			self.lib.calculator_variable_getvalue.restype = ctypes.c_int64
			self.lib.calculator_variable_getvalue.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_double)]
			
			self.lib.calculator_variable_setvalue.restype = ctypes.c_int64
			self.lib.calculator_variable_setvalue.argtypes = [ctypes.c_void_p, ctypes.c_double]
			
			self.lib.calculator_calculator_enlistvariable.restype = ctypes.c_int64
			self.lib.calculator_calculator_enlistvariable.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
			
			self.lib.calculator_calculator_getenlistedvariable.restype = ctypes.c_int64
			self.lib.calculator_calculator_getenlistedvariable.argtypes = [ctypes.c_void_p, ctypes.c_uint32, ctypes.POINTER(ctypes.c_void_p)]
			
			self.lib.calculator_calculator_clearvariables.restype = ctypes.c_int64
			self.lib.calculator_calculator_clearvariables.argtypes = [ctypes.c_void_p]
			
			self.lib.calculator_calculator_multiply.restype = ctypes.c_int64
			self.lib.calculator_calculator_multiply.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
			
			self.lib.calculator_calculator_add.restype = ctypes.c_int64
			self.lib.calculator_calculator_add.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
			
		except AttributeError as ae:
			raise ECalculatorException(ErrorCodes.COULDNOTFINDLIBRARYEXPORT, ae.args[0])
	
	def _checkBinaryVersion(self):
		nMajor, nMinor, _ = self.GetVersion()
		if (nMajor != BindingVersion.MAJOR) or (nMinor < BindingVersion.MINOR):
			raise ECalculatorException(ErrorCodes.INCOMPATIBLEBINARYVERSION)
	
	def checkError(self, instance, errorCode):
		if errorCode != ErrorCodes.SUCCESS.value:
			if instance:
				if instance._wrapper != self:
					raise ECalculatorException(ErrorCodes.INVALIDCAST, 'invalid wrapper call')
			message,_ = self.GetLastError(instance)
			raise ECalculatorException(errorCode, message)
	
	def GetVersion(self):
		pMajor = ctypes.c_uint32()
		pMinor = ctypes.c_uint32()
		pMicro = ctypes.c_uint32()
		self.checkError(None, self.lib.calculator_getversion(pMajor, pMinor, pMicro))
		return pMajor.value, pMinor.value, pMicro.value
	
	def GetLastError(self, InstanceObject):
		nErrorMessageBufferSize = ctypes.c_uint64(0)
		nErrorMessageNeededChars = ctypes.c_uint64(0)
		pErrorMessageBuffer = ctypes.c_char_p(None)
		pHasError = ctypes.c_bool()
		self.checkError(None, self.lib.calculator_getlasterror(InstanceObject._handle, nErrorMessageBufferSize, nErrorMessageNeededChars, pErrorMessageBuffer, pHasError))
		nErrorMessageBufferSize = ctypes.c_uint64(nErrorMessageNeededChars.value)
		pErrorMessageBuffer = (ctypes.c_char * (nErrorMessageNeededChars.value))()
		self.checkError(None, self.lib.calculator_getlasterror(InstanceObject._handle, nErrorMessageBufferSize, nErrorMessageNeededChars, pErrorMessageBuffer, pHasError))
		return pErrorMessageBuffer.value.decode(), pHasError.value
	
	def ReleaseInstance(self, InstanceObject):
		self.checkError(None, self.lib.calculator_releaseinstance(InstanceObject._handle))
	
	def CreateVariable(self, InitialValue):
		dInitialValue = ctypes.c_double(InitialValue)
		InstanceHandle = ctypes.c_void_p()
		self.checkError(None, self.lib.calculator_createvariable(dInitialValue, InstanceHandle))
		InstanceObject = Variable(InstanceHandle, self)
		return InstanceObject
	
	def CreateCalculator(self):
		InstanceHandle = ctypes.c_void_p()
		self.checkError(None, self.lib.calculator_createcalculator(InstanceHandle))
		InstanceObject = Calculator(InstanceHandle, self)
		return InstanceObject
	


''' Class Implementation for Base
'''
class Base:
	def __init__(self, handle, wrapper):
		if not handle or not wrapper:
			raise ECalculatorException(ErrorCodes.INVALIDPARAM)
		self._handle = handle
		self._wrapper = wrapper
	
	def __del__(self):
		self._wrapper.ReleaseInstance(self)


''' Class Implementation for Variable
'''
class Variable(Base):
	def __init__(self, handle, wrapper):
		Base.__init__(self, handle, wrapper)
	def GetValue(self):
		pValue = ctypes.c_double()
		self._wrapper.checkError(self, self._wrapper.lib.calculator_variable_getvalue(self._handle, pValue))
		return pValue.value
	
	def SetValue(self, Value):
		dValue = ctypes.c_double(Value)
		self._wrapper.checkError(self, self._wrapper.lib.calculator_variable_setvalue(self._handle, dValue))
	


''' Class Implementation for Calculator
'''
class Calculator(Base):
	def __init__(self, handle, wrapper):
		Base.__init__(self, handle, wrapper)
	def EnlistVariable(self, VariableObject):
		self._wrapper.checkError(self, self._wrapper.lib.calculator_calculator_enlistvariable(self._handle, VariableObject._handle))
	
	def GetEnlistedVariable(self, Index):
		nIndex = ctypes.c_uint32(Index)
		VariableHandle = ctypes.c_void_p()
		self._wrapper.checkError(self, self._wrapper.lib.calculator_calculator_getenlistedvariable(self._handle, nIndex, VariableHandle))
		VariableObject = Variable(VariableHandle, self._wrapper)
		return VariableObject
	
	def ClearVariables(self):
		self._wrapper.checkError(self, self._wrapper.lib.calculator_calculator_clearvariables(self._handle))
	
	def Multiply(self):
		InstanceHandle = ctypes.c_void_p()
		self._wrapper.checkError(self, self._wrapper.lib.calculator_calculator_multiply(self._handle, InstanceHandle))
		InstanceObject = Variable(InstanceHandle, self._wrapper)
		return InstanceObject
	
	def Add(self):
		InstanceHandle = ctypes.c_void_p()
		self._wrapper.checkError(self, self._wrapper.lib.calculator_calculator_add(self._handle, InstanceHandle))
		InstanceObject = Variable(InstanceHandle, self._wrapper)
		return InstanceObject
	
		
