/*++

Copyright (C) 2019 PrimeDevelopers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated Rust implementation file in order to allow easy
development of Prime Numbers Library. It needs to be generated only once.

Interface version: 1.2.0

*/


use libprimes_interfaces::*;
use libprimes_base::CBase;

// Stub struct to implement the Calculator trait
pub struct CCalculator {
  parent : CBase
}

// Implementation of parent traits via parent

impl Base for CCalculator {
  
  // class_type_id
  //
  // Get Class Type Id
  // * @param[return] class_type_id - Class type as a 64 bits integer
  //
  fn class_type_id(&mut self) -> u64 {
    self.parent.class_type_id()
  }
  
  // get_last_error_message
  //
  // Returns the last error registered of this class instance
  // * @param[out] error_message - Message of the last error registered
  // * @param[return] has_last_error - Has an error been registered already
  //
  fn get_last_error_message(&mut self, error_message : &mut String) -> bool {
    self.parent.get_last_error_message(error_message)
  }
  
  // clear_error_messages
  //
  // Clears all registered messages of this class instance
  //
  fn clear_error_messages(&mut self) {
    self.parent.clear_error_messages()
  }
  
  // register_error_message
  //
  // Registers an error message with this class instance
  // * @param[in] error_message - Error message to register
  //
  fn register_error_message(&mut self, error_message : &str) {
    self.parent.register_error_message(error_message)
  }
}

impl Calculator for CCalculator {

  
  // get_value
  //
  // Returns the current value of this Calculator
  // * @param[return] value - The current value of this Calculator
  //
  fn get_value(&mut self) -> u64 {
    unimplemented!();
  }
  
  // set_value
  //
  // Sets the value to be factorized
  // * @param[in] value - The value to be factorized
  //
  fn set_value(&mut self, _value : u64) {
    unimplemented!();
  }
  
  // calculate
  //
  // Performs the specific calculation of this Calculator
  //
  fn calculate(&mut self) {
    unimplemented!();
  }
  
  // set_progress_callback
  //
  // Sets the progress callback function
  // * @param[in] progress_callback - The progress callback
  //
  fn set_progress_callback(&mut self, _progress_callback : ProgressCallback) {
    unimplemented!();
  }
}

