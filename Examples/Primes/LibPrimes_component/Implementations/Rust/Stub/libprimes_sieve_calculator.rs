/*++

Copyright (C) 2019 PrimeDevelopers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated Rust implementation file in order to allow easy
development of Prime Numbers Library. It needs to be generated only once.

Interface version: 1.2.0

*/


use libprimes_interfaces::*;
use libprimes_calculator::CCalculator;

// Stub struct to implement the SieveCalculator trait
pub struct CSieveCalculator {
  parent : CCalculator,
  primes : Vec<u64>
}

// Implementation of parent traits via parent

impl Calculator for CSieveCalculator {
  
  // get_value
  //
  // Returns the current value of this Calculator
  // * @param[return] value - The current value of this Calculator
  //
  fn get_value(&mut self) -> u64 {
    self.parent.get_value()
  }
  
  // set_value
  //
  // Sets the value to be factorized
  // * @param[in] value - The value to be factorized
  //
  fn set_value(&mut self, value : u64) {
    self.parent.set_value(value)
  }
  
  // calculate
  //
  // Performs the specific calculation of this Calculator
  //
  fn calculate(&mut self) {
    self.primes.clear();
    let val = self.get_value();
    let mut sieved : Vec<bool> = vec![false; (val+1) as usize];
    sieved[0] = true;
    sieved[1] = true;
    let val_sqrt = (val as f64).sqrt() as u64 + 1;
    for i in 2_u64..val_sqrt {
      if self.parent.progress_abort() {
        return
      }
      if !sieved[i as usize] {
        self.primes.push(i);
        let mut mul : u64 = i*i;
        while mul <= val {
          sieved[mul as usize] = true;
          mul *= i;
        }
      }
    }
  }
  
  // set_progress_callback
  //
  // Sets the progress callback function
  // * @param[in] progress_callback - The progress callback
  //
  fn set_progress_callback(&mut self, progress_callback : ProgressCallback) {
    self.parent.set_progress_callback(progress_callback)
  }
}
impl Base for CSieveCalculator {
  
  // class_type_id
  //
  // Get Class Type Id
  // * @param[return] class_type_id - Class type as a 64 bits integer
  //
  fn class_type_id(&mut self) -> u64 {
    3
  }
  
  // get_last_error_message
  //
  // Returns the last error registered of this class instance
  // * @param[out] error_message - Message of the last error registered
  // * @param[return] has_last_error - Has an error been registered already
  //
  fn get_last_error_message(&mut self, error_message : &mut String) -> bool {
    self.parent.get_last_error_message(error_message)
  }
  
  // clear_error_messages
  //
  // Clears all registered messages of this class instance
  //
  fn clear_error_messages(&mut self) {
    self.parent.clear_error_messages()
  }
  
  // register_error_message
  //
  // Registers an error message with this class instance
  // * @param[in] error_message - Error message to register
  //
  fn register_error_message(&mut self, error_message : &str) {
    self.parent.register_error_message(error_message)
  }
}

impl SieveCalculator for CSieveCalculator {

  
  // get_primes
  //
  // Returns all prime numbers lower or equal to the sieve's value
  // * @param[out] primes - The primes lower or equal to the sieve's value
  //
  fn get_primes(&mut self, _primes : &mut Vec<u64>) {
    *_primes = self.primes.clone()
  }
}

impl CSieveCalculator {
  pub fn new() -> CSieveCalculator {
    CSieveCalculator {
      parent : CCalculator::new(),
      primes : Vec::new()
    }
  }
}