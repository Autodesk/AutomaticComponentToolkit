/*++

Copyright (C) 2019 PrimeDevelopers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated rust file in order to allow easy
development of Prime Numbers Library. The implementer of Prime Numbers Library needs to
derive concrete classes from the abstract classes in this header.

Interface version: 1.2.0

*/

#[allow(unused_imports)]
use std::ffi::c_void;

/*************************************************************************************************************************
 Version definition for LibPrimes
**************************************************************************************************************************/

#[allow(dead_code)]
pub const LIBPRIMES_VERSION_MAJOR : usize = 1;
#[allow(dead_code)]
pub const LIBPRIMES_VERSION_MINOR : usize = 2;
#[allow(dead_code)]
pub const LIBPRIMES_VERSION_MICRO : usize= 0;
#[allow(dead_code)]
pub const LIBPRIMES_VERSION_PRERELEASEINFO : &str = "";
#[allow(dead_code)]
pub const LIBPRIMES_VERSION_BUILDINFO : &str = "";


/*************************************************************************************************************************
 Error constants for LibPrimes
**************************************************************************************************************************/

#[allow(dead_code)]
pub const LIBPRIMES_SUCCESS : i32 = 0;
#[allow(dead_code)]
pub const LIBPRIMES_ERROR_NOTIMPLEMENTED : i32 = 1; /** functionality not implemented */
#[allow(dead_code)]
pub const LIBPRIMES_ERROR_INVALIDPARAM : i32 = 2; /** an invalid parameter was passed */
#[allow(dead_code)]
pub const LIBPRIMES_ERROR_INVALIDCAST : i32 = 3; /** a type cast failed */
#[allow(dead_code)]
pub const LIBPRIMES_ERROR_BUFFERTOOSMALL : i32 = 4; /** a provided buffer is too small */
#[allow(dead_code)]
pub const LIBPRIMES_ERROR_GENERICEXCEPTION : i32 = 5; /** a generic exception occurred */
#[allow(dead_code)]
pub const LIBPRIMES_ERROR_COULDNOTLOADLIBRARY : i32 = 6; /** the library could not be loaded */
#[allow(dead_code)]
pub const LIBPRIMES_ERROR_COULDNOTFINDLIBRARYEXPORT : i32 = 7; /** a required exported symbol could not be found in the library */
#[allow(dead_code)]
pub const LIBPRIMES_ERROR_INCOMPATIBLEBINARYVERSION : i32 = 8; /** the version of the binary interface does not match the bindings interface */
#[allow(dead_code)]
pub const LIBPRIMES_ERROR_NORESULTAVAILABLE : i32 = 9; /** no result is available */
#[allow(dead_code)]
pub const LIBPRIMES_ERROR_CALCULATIONABORTED : i32 = 10; /** a calculation has been aborted */


/*************************************************************************************************************************
 Handle definiton for LibPrimes
**************************************************************************************************************************/

// Enum of all traits - this acts as a handle as we pass trait pointers through the interface

#[allow(dead_code)]
pub enum HandleImpl {
  TBase(u64, Box<dyn Base>),
  TCalculator(u64, Box<dyn Calculator>),
  TFactorizationCalculator(u64, Box<dyn FactorizationCalculator>),
  TSieveCalculator(u64, Box<dyn SieveCalculator>)
}

pub type Handle = *mut HandleImpl;
pub type BaseHandle =Handle;
pub type CalculatorHandle =Handle;
pub type FactorizationCalculatorHandle =Handle;
pub type SieveCalculatorHandle =Handle;
/*************************************************************************************************************************
 Interface Struct definitions for LibPrimes
**************************************************************************************************************************/

#[repr(C)]
#[derive(Clone)]
pub struct PrimeFactor {
  pub prime: u64,
  pub multiplicity: u32
}

/*************************************************************************************************************************
 Function type definitions for LibPrimes
**************************************************************************************************************************/

// Callback to report calculation progress and query whether it should be aborted
//
// * @param[in] progress_percentage - How far has the calculation progressed?
// * @param[out] should_abort - Should the calculation be aborted?
//
pub type ProgressCallback = unsafe extern "C" fn(progress_percentage : f32, should_abort : *mut u8);
/*************************************************************************************************************************
 Traits defined for LibPrimes
**************************************************************************************************************************/

// Trait for interface Base
//
pub trait Base  {
  
  // class_type_id
  //
  // Get Class Type Id
  // * @param[return] class_type_id - Class type as a 64 bits integer
  //
  fn class_type_id(&mut self) -> u64;
  
  // get_last_error_message
  //
  // Returns the last error registered of this class instance
  // * @param[out] error_message - Message of the last error registered
  // * @param[return] has_last_error - Has an error been registered already
  //
  fn get_last_error_message(&mut self, error_message : &mut String) -> bool;
  
  // clear_error_messages
  //
  // Clears all registered messages of this class instance
  //
  fn clear_error_messages(&mut self);
  
  // register_error_message
  //
  // Registers an error message with this class instance
  // * @param[in] error_message - Error message to register
  //
  fn register_error_message(&mut self, error_message : &str);
}


// Trait for interface Calculator
//
pub trait Calculator : Base  {
  
  // get_value
  //
  // Returns the current value of this Calculator
  // * @param[return] value - The current value of this Calculator
  //
  fn get_value(&mut self) -> u64;
  
  // set_value
  //
  // Sets the value to be factorized
  // * @param[in] value - The value to be factorized
  //
  fn set_value(&mut self, value : u64);
  
  // calculate
  //
  // Performs the specific calculation of this Calculator
  //
  fn calculate(&mut self);
  
  // set_progress_callback
  //
  // Sets the progress callback function
  // * @param[in] progress_callback - The progress callback
  //
  fn set_progress_callback(&mut self, progress_callback : ProgressCallback);
}


// Trait for interface FactorizationCalculator
//
pub trait FactorizationCalculator : Calculator  {
  
  // get_prime_factors
  //
  // Returns the prime factors of this number (without multiplicity)
  // * @param[out] prime_factors - The prime factors of this number
  //
  fn get_prime_factors(&mut self, prime_factors : &mut Vec<PrimeFactor>);
}


// Trait for interface SieveCalculator
//
pub trait SieveCalculator : Calculator  {
  
  // get_primes
  //
  // Returns all prime numbers lower or equal to the sieve's value
  // * @param[out] primes - The primes lower or equal to the sieve's value
  //
  fn get_primes(&mut self, primes : &mut Vec<u64>);
}


/*************************************************************************************************************************
 Trait defined for global methods of LibPrimes
**************************************************************************************************************************/

// Wrapper trait for global methods
//
pub trait Wrapper {
  
  // get_version
  //
  // retrieves the binary version of this library.
  // * @param[out] major - returns the major version of this library
  // * @param[out] minor - returns the minor version of this library
  // * @param[out] micro - returns the micro version of this library
  //
  fn get_version(major : &mut u32, minor : &mut u32, micro : &mut u32);
  
  // get_last_error
  //
  // Returns the last error recorded on this object
  // * @param[in] instance - Instance Handle
  // * @param[out] error_message - Message of the last error
  // * @param[return] has_error - Is there a last error to query
  //
  fn get_last_error(instance : &mut dyn Base, error_message : &mut String) -> bool;
  
  // create_factorization_calculator
  //
  // Creates a new FactorizationCalculator instance
  // * @param[return] instance - New FactorizationCalculator instance
  //
  fn create_factorization_calculator() -> Box<dyn FactorizationCalculator>;
  
  // create_sieve_calculator
  //
  // Creates a new SieveCalculator instance
  // * @param[return] instance - New SieveCalculator instance
  //
  fn create_sieve_calculator() -> Box<dyn SieveCalculator>;
  
  // set_journal
  //
  // Handles Library Journaling
  // * @param[in] file_name - Journal FileName
  //
  fn set_journal(file_name : &str);
}
