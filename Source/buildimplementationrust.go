/*++

Copyright (C) 2023 Autodesk Inc. (Original Author)

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

--*/

//////////////////////////////////////////////////////////////////////////////////////////////////////
// buildimplementationrust .go
// functions to generate Rust interface classes, implementation stubs and wrapper code that maps to
// the rust interfaces.
//////////////////////////////////////////////////////////////////////////////////////////////////////

package main

import (
	"fmt"
	"log"
	"path"
	"path/filepath"
	"strings"
)

// BuildImplementationPascal builds Pascal interface classes, implementation stubs and wrapper code that maps to the Pascal header
func BuildImplementationRust(component ComponentDefinition, outputFolder string, stubOutputFolder string, projectOutputFolder string, implementation ComponentDefinitionImplementation) error {
	forceRebuild := true
	LibraryName := component.LibraryName
	BaseName := component.BaseName
	indentString := getIndentationString(implementation.Indentation)

	stubIdentifier := ""
	if len(implementation.StubIdentifier) > 0 {
		stubIdentifier = "_" + strings.ToLower(implementation.StubIdentifier)
	}

	IntfFileName := BaseName + "_interfaces.rs"
	IntfFilePath := path.Join(outputFolder, IntfFileName)
	log.Printf("Creating \"%s\"", IntfFilePath)
	IntfRSFile, err := CreateLanguageFile(IntfFilePath, indentString)
	if err != nil {
		return err
	}
	IntfRSFile.WriteCLicenseHeader(component,
		fmt.Sprintf("This is an autogenerated rust file in order to allow easy\ndevelopment of %s. The implementer of %s needs to\nderive concrete classes from the abstract classes in this header.", LibraryName, LibraryName),
		true)
	err = writeRustBaseTypeDefinitions(component, IntfRSFile, component.NameSpace, BaseName)
	if err != nil {
		return err
	}
	err = buildRustInterfaces(component, IntfRSFile, implementation.ClassIdentifier)
	if err != nil {
		return err
	}

	IntfWrapperStubName := path.Join(stubOutputFolder, BaseName+stubIdentifier+".rs")
	if forceRebuild || !FileExists(IntfWrapperStubName) {
		log.Printf("Creating \"%s\"", IntfWrapperStubName)
		stubfile, err := CreateLanguageFile(IntfWrapperStubName, indentString)
		if err != nil {
			return err
		}
		stubfile.WriteCLicenseHeader(component,
			fmt.Sprintf("This is an autogenerated Rust implementation file in order to allow easy\ndevelopment of %s. It needs to be generated only once.", LibraryName),
			true)
		RelInterfaceFile, err := filepath.Rel(stubOutputFolder, IntfFilePath)
		if err != nil {
			return err
		}
		err = buildRustGlobalStubFile(component, stubfile, implementation.ClassIdentifier, RelInterfaceFile)
		if err != nil {
			return err
		}
	} else {
		log.Printf("Omitting recreation of implementation stub \"%s\"", IntfWrapperStubName)
	}

	if len(projectOutputFolder) > 0 {
		CargoFileName := path.Join(projectOutputFolder, "Cargo.toml")
		if forceRebuild || !FileExists(CargoFileName) {
			log.Printf("Creating Cargo file \"%s\" for Rust Implementation", CargoFileName)
			CargoFile, err := CreateLanguageFile(CargoFileName, indentString)
			if err != nil {
				return err
			}
			CargoFile.WriteTomlLicenseHeader(component,
				fmt.Sprintf("This is an autogenerated Cargo file for the development of %s.", LibraryName),
				true)
			LibPath, err := filepath.Rel(projectOutputFolder, IntfWrapperStubName)
			if err != nil {
				return err
			}
			buildCargoForRustImplementation(component, CargoFile, LibPath)
		} else {
			log.Printf("Omitting recreation of Cargo file \"%s\" for Rust Implementation", CargoFileName)
		}
	}

	return nil
}

func buildRustGlobalStubFile(component ComponentDefinition, w LanguageWriter, ClassIdentifier string, RelInterfaceFile string) error {
	w.Writeln("")
	// Get all modules
	w.Writeln("#[path = \"%s\"]", strings.ReplaceAll(RelInterfaceFile, "\\", "/"))
	IntfName := strings.TrimSuffix(filepath.Base(RelInterfaceFile), ".rs")
	w.Writeln("mod %s;", IntfName)
	return nil
}

func buildRustInterfaces(component ComponentDefinition, w LanguageWriter, ClassIdentifier string) error {
	NameSpace := component.NameSpace
	w.Writeln("/*************************************************************************************************************************")
	w.Writeln(" Traits defined for %s", NameSpace)
	w.Writeln("**************************************************************************************************************************/")
	w.Writeln("")
	for i := 0; i < len(component.Classes); i++ {
		classinfo := component.Classes[i]
		err := writeRustTrait(component, classinfo, w)
		if err != nil {
			return err
		}
	}
	return nil
}

func buildCargoForRustImplementation(component ComponentDefinition, w LanguageWriter, path string) error {
	projectName := strings.ToLower(component.NameSpace)
	w.Writeln("[package]")
	w.Writeln("  name = \"%s\"", projectName)
	w.Writeln("  version = \"0.1.0\"")
	w.Writeln("[lib]")
	w.Writeln("  path = \"%s\"", strings.ReplaceAll(path, "\\", "/"))
	w.Writeln("  crate-type = [\"cdylib\"]")
	return nil
}

func writeRustTrait(component ComponentDefinition, class ComponentDefinitionClass, w LanguageWriter) error {
	w.Writeln("// Trait for interface %s", class.ClassName)
	w.Writeln("//")
	if class.ClassDescription != "" {
		w.Writeln("// %s", class.ClassDescription)
		w.Writeln("//")
	}
	parentClassString := ""
	if !component.isBaseClass(class) {
		if class.ParentClass == "" {
			parentClassString = fmt.Sprintf(": %s ", component.Global.BaseClassName)
		} else {
			parentClassString = fmt.Sprintf(": %s ", class.ParentClass)
		}
	}
	w.Writeln("trait %s %s {", class.ClassName, parentClassString)
	w.AddIndentationLevel(1)
	methods := class.Methods
	if component.isBaseClass(class) {
		methods = append(
			methods,
			GetLastErrorMessageMethod(),
			ClearErrorMessageMethod(),
			RegisterErrorMessageMethod(),
			IncRefCountMethod(),
			DecRefCountMethod())
	}

	for j := 0; j < len(methods); j++ {
		method := methods[j]
		w.Writeln("")
		err := writeRustTraitFn(method, w)
		if err != nil {
			return err
		}
	}
	w.ResetIndentationLevel()
	w.Writeln("}")
	w.Writeln("")
	w.Writeln("")
	return nil
}

func writeRustTraitFn(method ComponentDefinitionMethod, w LanguageWriter) error {
	methodName := toSnakeCase(method.MethodName)
	w.Writeln("// %s", methodName)
	w.Writeln("//")
	w.Writeln("// %s", method.MethodDescription)
	parameterString := "&mut self"
	returnType := ""
	for k := 0; k < len(method.Params); k++ {
		param := method.Params[k]
		RustParams, err := generateRustParameters(param, false)
		if err != nil {
			return err
		}
		RustParam := RustParams[0]
		if param.ParamPass != "return" {
			parameterString += fmt.Sprintf(", %s : %s", RustParam.ParamName, RustParam.ParamType)
		} else {
			returnType = RustParam.ParamType
		}
		w.Writeln("// %s", RustParam.ParamComment)
	}
	w.Writeln("//")
	if returnType == "" {
		w.Writeln("fn %s(%s);", methodName, parameterString)
	} else {
		w.Writeln("fn %s(%s) -> %s;", methodName, parameterString, returnType)
	}
	return nil
}
